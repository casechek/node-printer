name: Prebuild Binaries

on:
  pull_request:

jobs:
  get-version:
    name: Get Package Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      release_id: ${{ steps.create-release.outputs.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get package version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Set release version
        id: set-version
        run: echo "version=${{ steps.package-version.outputs.current-version }}-pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.set-version.outputs.version }}
          draft: true
          name: Release v${{ steps.set-version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prebuild-macos:
    name: Prebuild Binaries for macOS
    needs: get-version
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm i

      - name: Extract certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLICATION_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLICATION_CERTIFICATE_P12_PASSWORD }}

      - name: Build and sign macOS prebuild
        run: |
          mkdir -p lib\darwin-x64\
          mkdir -p lib\darwin-arm64\
          
          npx prebuild -t 20.3.0 --arch x64 --platform darwin -r electron --strip -c 'codesign --sign "${{ vars.TEAM_ID }}" --timestamp --options runtime --force --verbose lib/node_printer.node'
          copy lib\node_printer.node lib\darwin-x64\
          
          npx prebuild -t 20.3.0 --arch arm64 --platform darwin -r electron --strip -c 'codesign --sign "${{ vars.TEAM_ID }}" --timestamp --options runtime --force --verbose lib/node_printer.node'
          copy lib\node_printer.node lib\darwin-arm64\
          
          echo "Checking for tar.gz files:"
          find . -name "*.tar.gz" -type f

      - name: Upload macOS binary to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          draft: true
          files: |
            *.tar.gz
            **/*.tar.gz
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prebuild-windows:
    name: Prebuild Binaries for Windows
    needs: get-version
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm i

      - name: Prebuild Windows binaries
        run: |
          mkdir -p lib/win32-x64
          mkdir -p lib/win32-ia32
          
          npx prebuild --backend node-gyp --target 20.3.0 --arch x64 --platform win32 --strip --pack
          copy lib\node_printer.node lib\win32-x64\
          
          npx prebuild --backend node-gyp --target 20.3.0 --arch ia32 --platform win32 --strip --pack
          copy lib\node_printer.node lib\win32-ia32\
          
          dir lib
          dir lib\win32-x64 || echo "x64 directory not found"
          dir lib\win32-ia32 || echo "ia32 directory not found"

      - name: Upload Windows binaries to GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          draft: true
          files: |
            *.tar.gz
            **/*.tar.gz
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: Publish GitHub Release
    needs: [get-version, prebuild-macos, prebuild-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.get-version.outputs.version }}
          draft: false
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
