name: Prebuild Binaries

on:
  pull_request:

jobs:
  prebuild-macos:
    name: Prebuild Binaries for macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm i

      - name: Get Version
        id: get-version
        run: |
          echo "console.log(require('./package.json').version);" > get-version.js
          echo "version=$(node get-version.js)-pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Extract certificate
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLICATION_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.APPLICATION_CERTIFICATE_P12_PASSWORD }}

      - name: Build and sign macOS prebuild
        run: |
          npx prebuild --backend node-gyp --target 20.3.0 --arch x64 --platform darwin --strip --pack
          mkdir -p lib/darwin-x64
          cp lib/node_printer.node lib/darwin-x64/
          ls -la lib/darwin-x64/ || echo "Directory not found"
          codesign --sign "${{ vars.TEAM_ID }}" --timestamp --options runtime lib/darwin-x64/node_printer.node || echo "File not found for signing"

      - name: Create GitHub Release if it doesn't exist
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS binary to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          draft: true
          files: |
            *.tar.gz
            lib/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prebuild-windows:
    name: Prebuild Binaries for Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: actions/checkout@v4
      - run: npm i

      - name: Get Version
        id: get-version
        run: |
          echo "console.log(require('./package.json').version);" > get-version.js
          echo "version=$(node get-version.js)-pr${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release if it doesn't exist
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prebuild Windows binaries
        run: |
          # Create platform-specific directories
          mkdir -p lib/win32-x64
          mkdir -p lib/win32-ia32
          
          # Build x64 version
          npx prebuild --backend node-gyp --target 20.3.0 --arch x64 --platform win32 --strip --pack
          # Copy to platform-specific directory
          copy lib\node_printer.node lib\win32-x64\
          
          # Build ia32 version
          npx prebuild --backend node-gyp --target 20.3.0 --arch ia32 --platform win32 --strip --pack
          # Copy to platform-specific directory
          copy lib\node_printer.node lib\win32-ia32\
          
          # List the directories to verify
          dir lib
          dir lib\win32-x64 || echo "x64 directory not found"
          dir lib\win32-ia32 || echo "ia32 directory not found"

      - name: Upload Windows binaries to GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          draft: true
          files: |
            *.tar.gz
            lib/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
